{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReadGo Documentation","text":"<p>A powerful Go code analysis tool that helps developers explore and understand Go codebases with ease.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Type Analysis: Discover and analyze types, interfaces, and structs in Go code</li> <li>Package Analysis: Analyze package structure and dependencies</li> <li>File Analysis: Analyze individual Go source files</li> <li>Third-party Support: Analyze third-party packages and dependencies</li> <li>Caching: Efficient caching system for improved performance</li> <li>Flexible Configuration: Customizable options for different analysis needs</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>go get github.com/iamlongalong/readgo@v0.2.0\n</code></pre> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"github.com/iamlongalong/readgo\"\n)\n\nfunc main() {\n    // Create a new analyzer\n    analyzer := readgo.NewAnalyzer(\n        readgo.WithWorkDir(\".\"),\n        readgo.WithCacheTTL(5*time.Minute),\n    )\n\n    // Analyze the current project\n    result, err := analyzer.AnalyzeProject(context.Background(), \".\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Print analysis results\n    fmt.Printf(\"Project: %s\\n\", result.Name)\n    fmt.Printf(\"Types found: %d\\n\", len(result.Types))\n    fmt.Printf(\"Functions found: %d\\n\", len(result.Functions))\n}\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation Guide</li> <li>Quick Start Guide</li> <li>Basic Usage</li> <li>Configuration</li> <li>Examples</li> <li>Architecture</li> <li>API Reference</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details. </p>"},{"location":"ARCHITECTURE/","title":"ReadGo Architecture","text":""},{"location":"ARCHITECTURE/#overview","title":"Overview","text":"<p>ReadGo is a Go code analysis tool designed to help developers understand and navigate Go codebases. It provides functionality for analyzing types, interfaces, and package structures, with support for both local and third-party packages.</p>"},{"location":"ARCHITECTURE/#core-components","title":"Core Components","text":""},{"location":"ARCHITECTURE/#1-code-analyzer","title":"1. Code Analyzer","text":"<p>The core analysis functionality is provided by the <code>CodeAnalyzer</code> interface, which is implemented by <code>DefaultAnalyzer</code>. It offers:</p> <ul> <li>Type lookup and analysis</li> <li>Interface discovery and analysis</li> <li>Package structure analysis</li> <li>File-level analysis</li> </ul> <pre><code>graph TD\n    A[CodeAnalyzer Interface] --&gt; B[DefaultAnalyzer]\n    B --&gt; C[Type Analysis]\n    B --&gt; D[Interface Analysis]\n    B --&gt; E[Package Analysis]\n    B --&gt; F[File Analysis]</code></pre>"},{"location":"ARCHITECTURE/#2-source-reader","title":"2. Source Reader","text":"<p>The <code>SourceReader</code> interface handles file system operations and code reading:</p> <ul> <li>File tree traversal</li> <li>Source file reading</li> <li>Package file discovery</li> <li>File search functionality</li> </ul>"},{"location":"ARCHITECTURE/#3-validator","title":"3. Validator","text":"<p>The <code>Validator</code> interface provides code validation capabilities:</p> <ul> <li>File validation</li> <li>Package validation</li> <li>Project-wide validation</li> </ul>"},{"location":"ARCHITECTURE/#4-caching-system","title":"4. Caching System","text":"<p>The caching system improves performance by storing analysis results:</p> <ul> <li>Type lookup cache</li> <li>Package analysis cache</li> <li>File analysis cache</li> <li>TTL-based cache invalidation</li> </ul>"},{"location":"ARCHITECTURE/#data-flow","title":"Data Flow","text":"<ol> <li>Input Processing:</li> <li>File/package path validation</li> <li>Resolution of relative paths</li> <li> <p>Package import path handling</p> </li> <li> <p>Analysis Pipeline:    <pre><code>Input -&gt; Cache Check -&gt; Analysis -&gt; Cache Update -&gt; Result\n</code></pre></p> </li> <li> <p>Error Handling:</p> </li> <li>Custom error types for different scenarios</li> <li>Error wrapping for context preservation</li> <li>Detailed error messages</li> </ol>"},{"location":"ARCHITECTURE/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Caching:</li> <li>In-memory cache with TTL</li> <li>Thread-safe implementation using sync.Map</li> <li> <p>Automatic cache invalidation</p> </li> <li> <p>Resource Management:</p> </li> <li>Efficient file reading</li> <li>Memory-conscious type analysis</li> <li>Concurrent operations where applicable</li> </ol>"},{"location":"ARCHITECTURE/#extension-points","title":"Extension Points","text":"<p>The architecture is designed to be extensible:</p> <ol> <li>Interfaces:</li> <li>Custom analyzer implementations</li> <li>Alternative source readers</li> <li> <p>Custom validators</p> </li> <li> <p>Cache:</p> </li> <li>Pluggable cache backends</li> <li>Custom cache key generation</li> <li>Cache strategy customization</li> </ol>"},{"location":"ARCHITECTURE/#dependencies","title":"Dependencies","text":"<p>Core dependencies: - <code>golang.org/x/tools/go/packages</code>: Package loading and type checking - Standard library packages for core functionality</p>"},{"location":"ARCHITECTURE/#security","title":"Security","text":"<ol> <li>Input Validation:</li> <li>Path sanitization</li> <li>Type safety checks</li> <li> <p>Resource access controls</p> </li> <li> <p>Error Handling:</p> </li> <li>Secure error messages</li> <li>Resource cleanup</li> <li>Timeout mechanisms</li> </ol>"},{"location":"ARCHITECTURE/#future-considerations","title":"Future Considerations","text":"<ol> <li>Planned Improvements:</li> <li>Distributed caching</li> <li>Advanced type analysis</li> <li>Performance optimizations</li> <li> <p>IDE integration</p> </li> <li> <p>Potential Extensions:</p> </li> <li>Code generation support</li> <li>Cross-language analysis</li> <li>Custom analysis rules </li> </ol>"},{"location":"CONTRIBUTING/","title":"Contributing to ReadGo","text":"<p>We love your input! We want to make contributing to ReadGo as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"CONTRIBUTING/#development-process","title":"Development Process","text":"<p>We use GitHub to host code, to track issues and feature requests, as well as accept pull requests.</p> <ol> <li>Fork the repo and create your branch from <code>main</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>If you've changed APIs, update the documentation.</li> <li>Ensure the test suite passes.</li> <li>Make sure your code lints.</li> <li>Issue that pull request!</li> </ol>"},{"location":"CONTRIBUTING/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md with details of changes to the interface, if applicable.</li> <li>Update the CHANGELOG.md with a note describing your changes.</li> <li>The PR will be merged once you have the sign-off of at least one maintainer.</li> </ol>"},{"location":"CONTRIBUTING/#any-contributions-you-make-will-be-under-the-mit-software-license","title":"Any Contributions You Make Will Be Under the MIT Software License","text":"<p>In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.</p>"},{"location":"CONTRIBUTING/#report-bugs-using-githubs-issue-tracker","title":"Report Bugs Using GitHub's Issue Tracker","text":"<p>We use GitHub issues to track public bugs. Report a bug by opening a new issue.</p>"},{"location":"CONTRIBUTING/#write-bug-reports-with-detail-background-and-sample-code","title":"Write Bug Reports with Detail, Background, and Sample Code","text":"<p>Great Bug Reports tend to have:</p> <ul> <li>A quick summary and/or background</li> <li>Steps to reproduce</li> <li>Be specific!</li> <li>Give sample code if you can.</li> <li>What you expected would happen</li> <li>What actually happens</li> <li>Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)</li> </ul>"},{"location":"CONTRIBUTING/#use-a-consistent-coding-style","title":"Use a Consistent Coding Style","text":"<ul> <li>Run <code>go fmt</code> before committing</li> <li>Run <code>golangci-lint run</code> to check for linting issues</li> <li>Document exported functions and types</li> <li>Write meaningful commit messages</li> </ul>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under its MIT License. </p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>ReadGo is a Go package that can be installed using the standard Go toolchain.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Go 1.22 or later</li> <li>Git (for installation from source)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-go-get","title":"Using go get","text":"<p>The simplest way to install ReadGo is using <code>go get</code>:</p> <pre><code>go get github.com/iamlongalong/readgo@v0.2.0\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<p>To install from source:</p> <pre><code>git clone https://github.com/iamlongalong/readgo.git\ncd readgo\ngo install\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that ReadGo is installed correctly, create a simple test program:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"github.com/iamlongalong/readgo\"\n)\n\nfunc main() {\n    analyzer := readgo.NewAnalyzer()\n    result, err := analyzer.AnalyzeProject(context.Background(), \".\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"Successfully analyzed project: %s\\n\", result.Name)\n}\n</code></pre> <p>Save this as <code>test.go</code> and run:</p> <pre><code>go mod init test\ngo mod tidy\ngo run test.go\n</code></pre> <p>If you see output about the project analysis, ReadGo is installed correctly.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Read the Quick Start Guide to learn basic usage</li> <li>Check out the Examples for more complex use cases</li> <li>Learn about Configuration Options </li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get started with ReadGo by walking through some common use cases.</p>"},{"location":"getting-started/quick-start/#basic-project-analysis","title":"Basic Project Analysis","text":"<p>Here's a simple example that analyzes a Go project:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    \"github.com/iamlongalong/readgo\"\n)\n\nfunc main() {\n    // Create a new analyzer with default options\n    analyzer := readgo.NewAnalyzer(\n        readgo.WithWorkDir(\".\"),\n        readgo.WithCacheTTL(5*time.Minute),\n    )\n\n    // Analyze the current project\n    result, err := analyzer.AnalyzeProject(context.Background(), \".\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Print project information\n    fmt.Printf(\"Project: %s\\n\", result.Name)\n    fmt.Printf(\"Path: %s\\n\", result.Path)\n    fmt.Printf(\"Analyzed at: %s\\n\\n\", result.AnalyzedAt)\n\n    // Print types\n    fmt.Println(\"Types:\")\n    for _, t := range result.Types {\n        fmt.Printf(\"  - %s.%s: %s\\n\", t.Package, t.Name, t.Type)\n    }\n\n    // Print functions\n    fmt.Println(\"\\nFunctions:\")\n    for _, f := range result.Functions {\n        fmt.Printf(\"  - %s.%s\\n\", f.Package, f.Name)\n    }\n}\n</code></pre>"},{"location":"getting-started/quick-start/#finding-specific-types","title":"Finding Specific Types","text":"<p>To find a specific type in a package:</p> <pre><code>typeInfo, err := analyzer.FindType(context.Background(), \"path/to/package\", \"TypeName\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Printf(\"Found type: %s.%s (%s)\\n\", typeInfo.Package, typeInfo.Name, typeInfo.Type)\n</code></pre>"},{"location":"getting-started/quick-start/#analyzing-third-party-packages","title":"Analyzing Third-party Packages","text":"<p>ReadGo can analyze third-party packages:</p> <pre><code>result, err := analyzer.AnalyzePackage(context.Background(), \"github.com/stretchr/testify/assert\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// Print exported types\nfor _, t := range result.Types {\n    if t.IsExported {\n        fmt.Printf(\"Type: %s.%s\\n\", t.Package, t.Name)\n    }\n}\n</code></pre>"},{"location":"getting-started/quick-start/#configuration-options","title":"Configuration Options","text":"<p>ReadGo provides several configuration options:</p> <pre><code>analyzer := readgo.NewAnalyzer(\n    // Set working directory\n    readgo.WithWorkDir(\".\"),\n\n    // Enable caching with TTL\n    readgo.WithCacheTTL(5*time.Minute),\n\n    // Enable concurrent analysis\n    readgo.WithConcurrentAnalysis(true),\n\n    // Set analysis timeout\n    readgo.WithAnalysisTimeout(30*time.Second),\n)\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the Basic Usage Guide for more details</li> <li>Learn about Configuration Options</li> <li>See Examples for more use cases</li> <li>Read the Architecture Documentation to understand the internals </li> </ul>"}]}